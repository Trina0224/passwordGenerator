{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["resultDisplay","App","useForm","register","handleSubmit","onSubmit","data","console","log","digits","length","symbols","charset","retVal","i","n","charAt","Math","floor","random","includes","generatePassword","specialCharacter","htmlFor","defaultValue","name","placeholder","ref","className","type","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAIIA,E,4DAEW,SAASC,IAAM,MAmCOC,cAA3BC,EAnCoB,EAmCpBA,SAAUC,EAnCU,EAmCVA,aAWlB,OACF,gCACI,uBAAMC,SAAUD,GAZD,SAAAE,GACfC,QAAQC,IAAIF,EAAKG,QACjBT,EApCF,SAA0BU,EAAOC,GAC/B,IAAIC,EAAU,GACdC,EAAS,GACT,GAAGF,EAED,IADAC,EAAU,0EACC,CAET,IAAK,IAAIE,EAAI,EAAGC,EAAIH,EAAQF,OAAQI,EAAIJ,IAAUI,EAChDD,GAAUD,EAAQI,OAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,IAEtD,GAAIF,EAAOO,SAAS,MAAQP,EAAOO,SAAS,MAAQP,EAAOO,SAAS,MAC9DP,EAAOO,SAAS,MAAQP,EAAOO,SAAS,MAAQP,EAAOO,SAAS,MAChEP,EAAOO,SAAS,KACd,MAGNP,EAAS,QAOb,IAAMC,EAAI,EAAGC,GADbH,EAAU,kEACeF,OAAQI,EAAIJ,IAAUI,EAC3CD,GAAUD,EAAQI,OAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,IAK1D,OADAR,QAAQC,IAAIK,GACLA,EAOSQ,CAAiBf,EAAKG,OAAQH,EAAKgB,kBAEnDf,QAAQC,IAAIR,MAQZ,UACE,uBAAOuB,QAAQ,SAAf,iFACA,uBACEC,aARO,KASPC,KAAK,SACLC,YAAY,SACZC,IAAKxB,IAIP,qBAAKyB,UAAU,cAAf,SACA,wBAAOL,QAAQ,mBAAf,UACA,uBAAOK,UAAY,aACjBC,KAAK,WACLJ,KAAK,mBACLK,MAAM,OACNH,IAAKxB,IALP,mBAWA,uBAAO0B,KAAK,cAEd,uBACA,6BAAK7B,IACL,mFChFJ,IAYe+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzC,EAAD,MAEF0C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a46fae54.chunk.js","sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./styles.css\";\n\nlet resultDisplay;\n\nexport default function App() {\n\n  function generatePassword(length,symbols) {\n    let charset = \"\",\n    retVal = \"\";\n    if(symbols){\n      charset = \"!@#$%^&abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      while(true){\n\n        for (var i = 0, n = charset.length; i < length; ++i) {\n          retVal += charset.charAt(Math.floor(Math.random() * n));\n        }\n        if((retVal.includes(\"!\") || retVal.includes(\"@\") || retVal.includes(\"#\") ||\n              retVal.includes(\"$\") || retVal.includes(\"%\") || retVal.includes(\"^\") ||\n              retVal.includes(\"&\"))){\n                break;\n\n        }else{\n          retVal = \"\";\n\n        }\n      }\n\n    }else{\n      charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      for ( i = 0, n = charset.length; i < length; ++i) {\n          retVal += charset.charAt(Math.floor(Math.random() * n));\n      }\n    }\n\n    console.log(retVal);\n    return retVal;\n}\n\n\n  const { register, handleSubmit } = useForm();\n  const onSubmit = data => {\n    console.log(data.digits);\n    resultDisplay = generatePassword(data.digits, data.specialCharacter);\n    //alert(JSON.stringify(data));\n    console.log(resultDisplay);\n  };\n  const intialValues = {\n    firstName: \"16\",\n  };\n\n  return (\n<div>\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label htmlFor=\"digits\">How many digits you would like to generate from your local computer</label>\n      <input\n        defaultValue={intialValues.firstName}\n        name=\"digits\"\n        placeholder=\"Ex. 12\"\n        ref={register}\n      />\n\n\n      <div className=\"checkboxDis\">\n      <label htmlFor=\"specialCharacter\">\n      <input className = \"myCheckbox\"\n        type=\"checkbox\"\n        name=\"specialCharacter\"\n        value=\"true\"\n        ref={register}\n      />\n\n      Use !@#$%^&</label>\n      </div>\n\n      <input type=\"submit\" />\n    </form>\n    <br></br>\n    <h1>{resultDisplay}</h1>\n    <h5>  ✝︎ ART-Project © Copyright 2020</h5>\n\n</div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}